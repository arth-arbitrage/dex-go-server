/*
 * Arth-Arbitrage
 *
 * Arth Arbitrage API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package restapi

import (
	//"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"GetExchange",
			strings.ToUpper("Get"),
			"/exchanges/{id}",
			c.GetExchange,
		},
		{
			"GetLender",
			strings.ToUpper("Get"),
			"/lenders/{id}",
			c.GetLender,
		},
		{
			"GetLenderPools",
			strings.ToUpper("Get"),
			"/lenders/{id}/pools",
			c.GetLenderPools,
		},
		{
			"GetSwapPools",
			strings.ToUpper("Get"),
			"/exchanges/{id}/pools",
			c.GetSwapPools,
		},
		{
			"ListExchanges",
			strings.ToUpper("Get"),
			"/exchanges",
			c.ListExchanges,
		},
		{
			"ListLenders",
			strings.ToUpper("Get"),
			"/lenders",
			c.ListLenders,
		},
	}
}

// GetExchange - Exchange details
func (c *DefaultApiController) GetExchange(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt64Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetExchange(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetLender - Get lender
func (c *DefaultApiController) GetLender(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt64Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetLender(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetLenderPools - Pool List
func (c *DefaultApiController) GetLenderPools(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt64Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetLenderPools(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetSwapPools - Pool List
func (c *DefaultApiController) GetSwapPools(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt64Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetSwapPools(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ListExchanges - Get exchange list
func (c *DefaultApiController) ListExchanges(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ListExchanges(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ListLenders - Lending service list
func (c *DefaultApiController) ListLenders(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ListLenders(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
