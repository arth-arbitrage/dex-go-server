/*
 * Arth-Arbitrage
 *
 * Arth Arbitrage API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"os"
	"net/http"
	flag "github.com/spf13/pflag"
	restapi "github.com/arth-arbitrage/dex-go-server/go"
	"github.com/arth-arbitrage/dex-go-server/dexes"
	"github.com/rs/cors"
)

func main() {

	configFilePath := ""
	flag.StringVarP(&configFilePath, "config", "c", "config.json", "Configuraton file.")
	flag.Parse()
	config, err := dexes.GetConfig(configFilePath) 	
	if(err != nil) {
		log.Fatal(err)
		os.Exit(1)
	}
	log.Printf("configFilePath  %v", configFilePath)
	log.Printf("Server started %v", config.Web3Provider)


	//DefaultApiService := restapi.NewDefaultApiService()
	DefaultApiService, err := dexes.NewDefaultApiService(config)
	if(err != nil) {
		log.Fatal(err)
		os.Exit(1)
	}
	DefaultApiController := restapi.NewDefaultApiController(DefaultApiService)

	router := restapi.NewRouter(DefaultApiController)

	handler := cors.Default().Handler(router)
	//log.Fatal(http.ListenAndServe(":4000", router))
	log.Fatal(http.ListenAndServe(":4000", handler))
}
